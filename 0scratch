<% if @gdate != @pdate %>
  <div class="row">
    <div class="span6" style="background: white">
      <p>
    </div>
    <div class="span6" style="background: gold">
      <%= @gdate %> marker2
    </div>
  </div>
<% elsif @gtime != @ptime %>
  <div class="row">
    <div class="span6" style="background: gold; text-align: left">
      <%= @gtime %>
    </div>
  </div>
<% end %>




  <div class="row">
    <div class="span6" style="background: green">
      gdate: <%= @gdate %>
    </div>
    <div class="span6" style="background: yellow">
      gtime: <%= @gtime %>
    </div>
  </div>




<div class="row">
  <% (1..6).each do |col| %>
    <div class="span1 oddcolmarker">
      odd <%= col %>
    </div>
    <div class="span1 evencolmarker">
      even <%= col %>
    </div>
  <% end %>
</div>

        <ul>
          <% @entries.each do |e| %>
            <li>
                  <%= link_to "Week #{e.week.week_num}",   week_path(w) %>
            </li>
          <% end %>
        </ul>



[root@localhost fbp]# heroku config:get SENDGRID_USERNAME
app16110051@heroku.com
[root@localhost fbp]# heroku config:get SENDGRID_PASSWORD
nqvkvvhd



Ed Spowhn            Wiley77@aol.com            Tazdivil




 http://stark-sea-8448.herokuapp.com

      status << "home score: #{g.home_points}, away score: #{g.away_points}"



  def make_result_image(week)
      status = []

      status << "week num: #{week.week_num}"
      status << "current user: #{current_user.name}"

      pm = 30 # player margin
      gm = 10 # game margin
      tm = 5  # text margin

      ph = 30  # player height
      pw = 150 # player name width

      gh = 100 # game height
      gw = 50  # game width

      tw = 50 # total width

      posw = 30 # pos width
      tbw = 30  # tiebreak width

      go = pm + posw + pw + tbw + tw # game offset
      po = gm + gh # player offset

      entries = week.entries
      cu_entry = entries.find_by_user_id current_user.id
      cu_picks = cu_entry.picks if cu_entry

      games = week.games.sort { |a,b| a <=> b }
      games.each do |g|
        g.home_points = 0 if g.home_points == nil
        g.away_points = 0 if g.away_points == nil
      end

      tb_game = week.games.find_by_tiebreak true

      status << "tiebreak game #{tb_game.away_team.nickname} at #{tb_game.home_team.nickname}"
      tb_game_points = tb_game.home_points + tb_game.away_points

      # build an array of player information, so we can later sort it by calculatd total points
      players = []
      entries.each do |e|
        player = Player.new(e.user.nickname, 0, e.user, [], e.tiebreak, e.user.id == current_user.id)

        # build the player picks array and calculate total points for the player
        # note it is important that the player picks are ordered the same way as the
        # games, since we'll be displaying them with no further reference to the games

        games.each do |g|
          pick = nil
          e.picks.each do |entry_pick|
            if entry_pick.game.id == g.id
              pick = entry_pick
              break
            end
          end
          player[:picks << pick
          unless g.status == 'NOT_STARTED' 
            if g.home_points > g.away_points
              if pick.pick == "HOME" then player[:points += pick.points end
            elsif g.away_points > g.home_points
              if pick.pick == "AWAY" then player[:points += pick.points end
            else
              player[:points += pick.points / 2.0
            end
          end
        end
        player[:sort_points = player[:points
        # add an increment to diffentiate by tiebreak
        player[:sort_points += (1000 -((tb_game_points - player[:tb).abs)/10000.0)
        # add an even smaller increment to differentiate low tiebreak vs high (low wins)
        player[:sort_points += 0.00001 if player[:tb > tb_game_points 
        player[:sort_points += 0.00002 if player[:tb < tb_game_points 

        players << player
      end

      players.sort! { |a,b|  b.sort_points <=> a.sort_points }
      

      count = 0

      canvas = Magick::ImageList.new
      canvas.new_image(1200, 3000)

      games.each_with_index do |g, i|
        r = Magick::Draw.new
        r.stroke = "rgb(80%, 85%, 85%)"
        r.line go + gw*i, po, go + gw*i, po + entries.size*ph
        r.draw canvas

        fill = "gray"
        pointsize = 10
        home_ahead = false
        away_ahead = false
        unless g.status == "NOT_STARTED"
          home_ahead = (g.home_points >= g.away_points)
          away_ahead = (g.home_points <= g.away_points)
        end

        cu_pick = cu_picks.find_by_game_id(g.id) if cu_picks

        r = Magick::Draw.new
        r.translate go + gw*i + gw/2, po
        r.rotate -60
        r.pointsize = 11
        r.pointsize = 16 if cu_pick and cu_pick.pick == "AWAY"
        r.fill = "rgb(10%, 10%, 10%)"
        r.fill = "green" if g.status == "NOT_STARTED"
        r.fill = "red" if away_ahead
        r.font_weight = 100
        r.font_weight = 900 if away_ahead
        r.text 0,0, "#{g.away_team.display_name}"
        r.draw canvas

        r = Magick::Draw.new
        r.translate go + gw*i + gw/2 + gw/3, po
        r.rotate -60
        r.pointsize = 11
        r.pointsize = 16 if cu_pick and cu_pick.pick == "HOME"
        r.fill = "rgb(10%, 10%, 10%)"
        r.fill = "green" if g.status == "NOT_STARTED"
        r.fill = "red" if home_ahead
        r.font_weight = 100
        r.font_weight = 900 if home_ahead
        r.text 0,0, "#{g.home_team.display_name}"
        r.draw canvas
      end

      players.each_with_index do |e,i|
        r = Magick::Draw.new
        f = ["rgb(90%, 95%, 95%)", "rgb(85%, 90%, 90%)"]
        r.fill = f[i%2]
        r.rectangle pm, po + i*ph, go + games.size * gw, po+(i+1)*ph
        r.draw canvas
      end

      prev_sort_points = -1
      prev_pos = 0
      results = []
      players.each_with_index do |player,i|
        if player[:sort_points == prev_sort_points
          pos = prev_pos
        else
          pos = i + 1
        end

        prev_sort_points = player[:sort_points
        prev_pos = pos
        results << [pos, player[:name, player[:points]
        #status << "\n========= Processing player #{player[:name}"
        r = Magick::Draw.new
        r.fill = "rgb(20%, 20%, 20%)"
        r.pointsize = 16
        r.text(pm + posw + tm, po + ph*i + ph*0.7, player[:name)
        r.draw canvas

        total = 0
        games.each_with_index do |g,j|
          r = Magick::Draw.new

          if g.status == "NOT_STARTED"
            r.fill = "green"
          else
            r.fill = "rgb(10%, 10%, 10%)"
            if ((g.home_points >= g.away_points) && player[:picks[j].pick == "HOME") || ((g.away_points >= g.home_points) && player[:picks[j].pick == "AWAY")
              r.fill = "red"
            end
          end

          r.decorate UnderlineDecoration if player[:picks[j].pick == "AWAY"
          r.pointsize = 20
          r.font_weight = 100
          r.text(go + j*gw + gw*0.2, po + ph*i + ph*0.7, player[:picks[j].points.to_s)
          r.draw canvas
        end

        r = Magick::Draw.new
        r.fill = "gray"
        r.pointsize = 16
        r.font_weight = 200
        r.text(pm + tm, po + ph*i + ph*0.7, pos.to_s)
        r.draw canvas

        r = Magick::Draw.new
        r.fill = "gray"
        r.pointsize = 16
        r.font_weight = 200
        r.text(pm + posw + pw + tm, po + ph*i + ph*0.7, player[:tb.to_s)
        r.draw canvas

        r = Magick::Draw.new
        r.fill = "blue"
        r.pointsize = 20
        r.font_weight = 700
        r.text(pm + posw + pw + tbw + tm, po + ph*i + ph*0.7, player[:points.to_s)
        r.draw canvas
      end

      `ls -l app/assets/images`.each_line { |line| status << "find: #{line}"}
      status << "writing image"
      image_file = "result_#{week.week_num}_#{rand(10000)}_#{current_user.name}.png"
      status << "image file: #{image_file}"
      `rm -f app/assets/images/#{image_file}`
      canvas.write "app/assets/images/#{image_file}"

      status << "image done"
      `ls -l app/assets/images`.each_line { |line| status << "find: #{line}"}
      #[results, status, image_file]
      [players, games]
  end


    # case action
    # when :NEW, :PICKS
    #   view_context.get_games_and_players @week
    # when :UPDATE
    #   view_context.get_games_and_players @week, params
    # when :BEST
    #   view_context.get_games_and_players @week, nil, true
    # end

<!--%= image_tag @image_name %-->

table>
  <tr><td><p></td></tr>
  <tr>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <% @games.each do |g| %>
        <td>
          <%= g.away_team.code %> <%= g.home_team.code %>
        </td>
    <% end %>
  </tr>
  <% @players.each do |p| %>
    <tr>
      <td> <%= p.name %> </td>
      <td> ..... </td>
      <td> <%= p.points %> </td>
      <td> ..... </td>
      <td> <%= p.tb %> </td>
      <% p.picks.each do |pick| %>
        <td> <%= pick.points %> </td>
      <% end %>
    </tr>
  <% end %>
  <tr><td><p></td></tr>
</table

<!--table>
  <% @status.each do |s| %>
    <tr>
      <td> <%= s %> </td>
    </tr>
  <% end %>
</table-->






        if g.status != 'NOT_STARTED' && action == :RESULTS
          logger.debug "get_games_and_players        game started and RESULTS case"
          if g.home_points > g.away_points
            if choice == "HOME"
              player[:points] += pick.points
              color = "red"
            else
              color = "black"
            end
          elsif g.away_points > g.home_points
            if choice == "AWAY"
              player[:points] += pick.points
              color = "red"
            else
              color = "black"
            end
          else
            player[:points] += pick.points / 2.0
            dpoints = pick.points / 2.0
            color = "red"
          end
        else
          logger.debug "get_games_and_players        game not started or not RESULTS case"
          if action == :UPDATE
            choice = params["game_#{g.id}"]
          end

          if g.status == 'NOT_STARTED' && action == :NEW
            choice = 'NR'
          end

          logger.debug "get_games_and_players        choice: #{choice}"
          case choice
          when 'NR'
            color = "green"
          when 'TIE'
            player[:points] += pick.points / 2.0            
            dpoints = pick.points / 2.0
            color = "red"
          else
            if g.home_points >= g.away_points
              if choice == "HOME"
                player[:points] += pick.points
                color = "red"
              else
                color = "black"
              end
            elsif g.away_points >= g.home_points
              if choice == "AWAY"
                player[:points] += pick.points
                color = "red"
              else
                color = "black"
              end
            else
              player[:points] += pick.points / 2.0
              dpoints = pick.points / 2.0
              color = "red"
            end
          end
        end





<!-- div class="span10 offset1" style="background: khaki; border-radius: 15px">
<div class="span8 offset1" style="background: khaki">
  <%= form_tag do %>
    <table>
      <% @games.each do |game| %>
      <tr>
        <td "padding=20">
          <%= radio_button_tag "game_#{game.id}", 'away' %><p>
        </td>
        <td>
          <%= label_tag "game_#{game.id}_away", game.away_team.display_name %>
        </td>
        <td>
          ___ at ____
        </td>
        <td>
          <%= radio_button_tag "game_#{game.id}", 'home', true %><p>
        </td>
        <td>
          <%= label_tag "game_#{game.id}_home", game.home_team.display_name %>
        </td>
        <td>
          <%= radio_button_tag "game_#{game.id}", 'tie' %><p>
        </td>
        <td>
          <%= label_tag "game_#{game.id}_home", "tie" %>
        </td>
        <td>
          _______
        </td>
        <td>
          COMPLETED
        </td>
      </tr>
      <% end %>
    </table>
        <%= submit_tag("Update scenario", class: "btn btn-large btn-primary") %>
        <%= submit_tag("Use my picks", class: "btn btn-large btn-primary") %>
        <%= submit_tag("Find my best shot", class: "btn btn-large btn-primary") %>
  <% end %>
</div>
</div -->



        logger.debug "get_games_and_players        pick: #{pick.pick}"
        outcome = pick.pick # default
        dpoints = pick.points # default
        color = "green" #default
        logger.debug "get_games_and_players        action: #{action}"
        case action
        when :NEW
          outcome = 'NR' if g.status == 'NOT_STARTED'
        when :RESET
          outcome = 'NR'
        when :BEST
          outcome = 'NR'
        when :UPDATE
          outcome = params["game_#{g.id}"]
        when :PICKS
          outcome = cu_pick if g.status == 'NOT_STARTED' # same as new
        when :RESULTS
          if g.status == 'NOT_STARTED'
            outcome = 'NR'
            outcome = params["game_#{g.id}"] if params["game_#{g.id}"]
          else
            outcome = 'HOME' if g.home_points > g.away_points
            outcome = 'AWAY' if g.away_points > g.home_points
            outcome = 'TIE' if g.away_points == g.home_points
          end
        else
          outcome = 'NR'
        end

Entry.all.each { |e| e.winner = false; e.save }

